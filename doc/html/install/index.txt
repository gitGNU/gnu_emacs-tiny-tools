Table of contents

       1.0 Installation instructions
           1.1 Foreword
           1.2 Unpacking
           1.3 Install
           1.4 Minimal install
           1.5 About tinypath

       2.0 Project information
           2.1 What does prefix "tiny" mean
           2.2 Thank you section

       3.0 Further reading -- about loading packages
           3.1 Dynamic byte compilation note
           3.2 Autoloads
           3.3 Customizing packages

1.0 Installation instructions

    1.1 Foreword

        #T2HTML-TITLE Emacs Tiny Tools Project install instructions
        #T2HTML-METAKEYWORDS Emacs, Emacs Lisp, Tiny Tools Documentation
        #T2HTML-OPTION --css-code-bg
        #T2HTML-OPTION --css-code-note=Note:

        #t2html-comment http://www.xemacs.org/Documentation/packageGuide.html

        Copyright (C) 1995-2016 Jari Aalto

        License: This material may be distributed only subject to
        the terms and conditions set forth in GNU General Public
        License v2 or later; or, at your option, distributed under the
        terms of GNU Free Documentation License version 1.2 or later
        (GNU FDL).

        Emacs Tiny Tools is a collection of libraries and packages,
        which are designed to be OS and X/Emacs platform independent.
        E.g. configure load-path automatically, URL handler,
        easy-delete, mail complete and many more. This file is
        README.txt included in Emacs Tiny Tools kit. It contains
        instructions how to install a cross platform Emacs/XEmacs/
        Unix/Win32 compatible utilities for wide variety of tasks:
        diff/patch; searching, replacing, caching files, automatic
        load-path setup and more.

    1.2 Unpacking

        Extract the package. Under Windows platform: create directories
        manually e.g. on `C:\home\elisp'. A Windows
        #URL<http://support.microsoft.com/kb/310519><environment variable>
        HOME must alse be defined to point to suitable location, like
        `C:\home'. The HOME directory must exist. Suggested directory
	structure:

            $HOME
            |
            +-elisp/
            | |
            | +-packages/
            |
            +-tmp/

        Unpack the archive to suitable location, like
        `$HOME/elisp/packages'. In Linux the commands are:

            cd $HOME/elisp/packages
            gzip -dc ~/tmp/download/emacs-tiny-tools*.gz | tar -xvf -

    1.3 Install

        Configure Emacs *load-path* to point to package directories.
        Substitute the paths as necessary to reflect your unpack locations:

            (add-to-list 'load-path
                         "~/elisp/packages/emacs-tiny-tools/lisp/tiny")
            (add-to-list 'load-path
                         "~/elisp/packages/emacs-tiny-tools/lisp/other")

            (require 'tiny-autoload-loaddefs-tiny)
            (require 'tiny-autoload-loaddefs-other)

	See each package for further instructions:

            ;;  An example for configure some package.

            (autoload 'turn-on-tinyperl-mode "tinyperl" "" t)
            (add-hook 'perl-mode-hook  'turn-on-tinyperl-mode)
            (add-hook 'cperl-mode-hook 'turn-on-tinyperl-mode)

    1.4 Minimal install

        If you are tight of space or otherwise do not need all the
        tools or if you're only interested in specific package, a
        minimum installation is possible. The basic idea is to include
        libraries + needed package(s).

            tinyliba.el     - autoloads
            tinylibb.el     - backward compatibility; Emacs version changes
            tinylibm.el     - macros and other low level forms
            tinylib.el      - main library
            tinylibxe.el    - XEmacs support library

            + select packages that you're interested in

    1.5 About tinypath

	You're interested about this only if you have multiple (NN+) emacs
	packages gathered around Internet which are installd in various
	directories and you do not want any manual handling of keeping
	`load-path' up to date after new installs.

        The following lines below can configure Emacs to be aware of *all*
        lisp paths under `$HOME/elisp' or `$HOME/lisp', so whatever magic
        you used to do to keep your `load-path' up to date is no longer
        needed. The `load-path' variable is periodically kept up to date.

            ;; $HOME/.emacs

            (load "~/elisp/packages/tiny-tools/lisp/tiny/tinypath")

            ;; ... rest of the startup

            ;; End of example

        When the `tinypath.el' package is active, you can pretty much put
        packages or individual lisp files anywhere, provided that they
        reside under *$HOME/elisp*. you can create or delete directories
        and move files around to organize your lisp files. The only
        restriction is that you do not use any symlinks; not to directories
        or not to files (reason is explained in file tinypath.el).
        Let's suppose the hierarchy of lisp files look something like this:

            $HOME/elisp/
                        |
                        +-packages/
                        |         |
                        |         + package-1.NNNN/
                        |         + package-2.NN/
                        +-other/
                        +-my/

        Now, perhaps you see an *utility.el* in gnu.emacs.sources that
        you would like to use. How do you install it? Just drop it in,
        say, to `$HOME/elisp/other/' directory and call `M-x'
        `tinypath-cache-regenerate'. After that Emacs knows the
        package in next Emacs sessions. You still have to add relevant
        lines to your Emacs startup which make the package active.
        Look inside *utility.el* and its setup instructions, something
        like:

            (load "utility")
            (utility-install)   ;; or whatever is needed to activate it

2.0 Project information

    2.1 What does prefix "tiny" mean

        The first package made was *tinyappend.el*, a simple utility to
        gather selected areas of text somewhere convenient. Since then the
        prefix "tiny" just stuck. The word has no particular meaning.

    2.2 Thank you section

        The Emacs utilities evolved in the direction of "Tiny Tools";
        modules that got initially written in the past years starting
        with Emacs 18.59. The current code base is aimed to be
        XEmacs/Emacs Unix/Win32 platform independent. The cross
        platform could not be possible without following testers that
        patiently kept reporting bugs and making improvement
        suggestions. Most sincere thanks to you all.

        o   Henk SPG <tank AT xs4all.nl> who had courage to take early v1.6x
            TinyPgp in XEmacs. I got very good feedback and bug tracing
            assistance from him.
        o   Samuel Tardieu <sam AT inf.enst.fr> has been a key figure
            in  testing the PGP interfaces with 2.6.x and 5.x in Unix.
        o   Dan Rich <drich AT cisco.com> who assisted me with solving the
            XEmacs 20-21.x incompatibility problems. The correction cycle
            rolled out changes that caused rewriting my other packages too.
            In addition he suggested many other new features I didn't think
            of before. He cleared many problems by talking to XEmacs 20.x
            maintainers and if that's not all, he also made sure the
            packages worked in VM. I'm very happy that Dan came into
            picture.
        o   Sami Khoury <skhoury AT omnisig.com> tried every new tiny tools
            release and reported any byte compiler errors with latest Emacs
            releases. He also suggested many improvements, many new
            features to add and sent patches. Without Sami, I would have
            not been able to know how things work in Emacs 20.x and 21.x.
            Sami was the ears and eyes in the bleeding edge Emacs
            development till the FSF opened their Emacs CVS server.
        o   David x callaway <dxc AT xprt.net> joined the team somewhere 2000-10
            and kept asking, suggesting and reporting improvements in rapid
            fashion. That's what is needed to make all tools better. Thank
            you David, Don't stop bugging the maintainer *smile*.
        o   Luis Miguel Hernanz Iglesias <luish AT germinus.com> got
            interested in 2000-10 and was fascinated with the TinyPath
            (new utility) which made Emacs lisp package path configuration
            a joy. He joined the development and sent lof of patches and
            squeezed many bugs from TinyPath. I'm impressed!

3.0 Further reading -- about loading packages

    3.1 Dynamic byte compilation note

          Please read these instructions with some salt, because the
          they may not be 100% accurate. Feel free to suggest
          corrections to this text.

        All the files in Tiny Tools kit turn on the dynamic byte
        compilation flag, which appeared in Emacs 19.29 and XEmacs
        19.14. That's something you don't have to worry about, This
        has some nice benefits over the normal compilation. If you say:

            (require 'tinylibm)

        the statement used to mean "load library tinylibm". All
        functions were imported into emacs in a whip. But that's with
        dynamically compiled files. Instead it means "load STUBS from
        library tinylibm". The STUBS are pointers in a table to all
        the rest of the functions in the library. So, the functions
        are not actually loaded to your Emacs; neither does your Emacs
        suffer from sudden memory bloat.

        When the actual function is called, Emacs automatically substitutes
        the STUB with the function definition by loading it from the
        library. Just that function, not the others. That's the benefit of
        the dynamic byte compilation in a nutshell.

        By the way, if you happen to need some function from the libraries,
        don't do this:

            (require 'tinylimt)     ;; mail tools

        _Do_ _not_ _do_ _this_ either, if you need something from the main
        library:

            (require 'tinylib)

        The correct way to let your emacs know about all the existing
        library functions, is to load the *m* library. It will define
        all the necessary autoloads to rest of the function and you don't
        have to worry about the location of a particular function

            ;;  Define everything. Publishes functions. Defines
            ;;  backward compatibility functions, autoloads etc.
            (require 'tinylibm)

    3.2 Autoloads

        When you install packages, try to avoid loading them from your
        $HOME/.emacs like this

            (require 'tinytab)  ;; TAB minor mode

        Because it means that the whole package is loaded (or STUBS
        when loading a byte compiled version). If you have many
        `require' commands, your Emacs startup time grows
        proportionally. There is a better way to load files; called
        `autoload'. It means that you tell Emacs; that "function
        exists in package xxx". When function or feature is called
        (and the autoload triggers), Emacs loads function from the
        package. Some day you don't use some feature in your emacs,
        sometimes you use, and Emacs loads the package as needed.

        Now, if you read the *installation* section from every package
        and prefer copying the autoload setup instead, you will have
        the most optimized way to install the package to your Emacs.
        There may also be a note that package can't be autoloaded. In

        For even more lazy-loading packages, see package *TinyLoad*
        which you can use to optimise lisp file loads.

    3.3 Customizing packages

        Emacs comes with the package *defcustom.el* bundled. If you
        have limited Emacs lisp knowledge or if you want an easy
        interface to packages' variables, you can customize the
        modules using defcustom interface. Use TAB key to complete
	*group* part, e.g. Tiny<TAB>:

            M-x customize-group RET group RET

End of file
